{"ast":null,"code":"export default class FetchService {\n  /**\n   * Sends GET request to API, returning any data\n   * or erros in a promise.\n   * @param {String} url URL for the API request.\n   */\n  static GET(url) {\n    const options = {\n      method: 'GET'\n    };\n    return FetchService.fetch(url, options).then(data => Promise.resolve(data)).catch(error => Promise.reject(error));\n  }\n  /**\n   * Sends POST request to API, returning any data\n   * or erros in a promise.\n   * @param {String} url URL for the API request.\n   * @param {Boolean} authFlag Send Authorization header?\n   */\n\n\n  static POST(url, data) {\n    const options = {\n      method: 'POST',\n      body: JSON.stringify({\n        data\n      })\n    };\n    return FetchService.fetch(url, options).then(data => Promise.resolve(data)).catch(error => Promise.reject(error));\n  }\n  /**\n   * Sends PUT request to API, returning any data\n   * or erros in a promise.\n   * @param {String} url URL for the API request.\n   * @param {Object} data Any data you want to pass to the API.\n   */\n\n\n  static PUT(url, data) {\n    const options = {\n      method: 'PUT',\n      body: JSON.stringify({\n        data\n      })\n    };\n    return FetchService.fetch(url, options).then(data => Promise.resolve(data)).catch(error => Promise.reject(error));\n  }\n  /**\n   * Generic fetch method for our API.\n   * Automatically validates responses, etc.\n   * @param {String} url API URL you are calling.\n   * @param {Object} options HTTP header options.\n   */\n\n\n  static fetch(url, options) {\n    const headers = {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    };\n    return fetch(url, {\n      headers,\n      ...options\n    }).then(res => {\n      if (!FetchService._checkStatus(res)) {\n        return res.json().then(blob => Promise.reject(blob));\n      }\n\n      return res.json().then(blob => Promise.resolve(blob));\n    });\n  }\n  /**\n   * Checks the status code of a given response\n   * @param {Object} response API respoonse.\n   * @returns {Boolean} If the reponse code is good\n   * (>=200, <300) or not (> 300)\n   */\n\n\n  static _checkStatus(response) {\n    if (response.status >= 200 && response.status < 300) {\n      return true;\n    }\n\n    return false;\n  }\n\n}","map":{"version":3,"sources":["/Users/amanshrestha/Work/Careers Uncorked/uncorked/src/assets/helper/FetchService.js"],"names":["FetchService","GET","url","options","method","fetch","then","data","Promise","resolve","catch","error","reject","POST","body","JSON","stringify","PUT","headers","Accept","res","_checkStatus","json","blob","response","status"],"mappings":"AAAA,eAAe,MAAMA,YAAN,CAAmB;AAC9B;;;;;AAKA,SAAOC,GAAP,CAAWC,GAAX,EAAgB;AACZ,UAAMC,OAAO,GAAG;AACZC,MAAAA,MAAM,EAAE;AADI,KAAhB;AAIA,WAAOJ,YAAY,CAACK,KAAb,CACHH,GADG,EAEHC,OAFG,EAIFG,IAJE,CAIGC,IAAI,IAAIC,OAAO,CAACC,OAAR,CAAgBF,IAAhB,CAJX,EAKFG,KALE,CAKIC,KAAK,IAAIH,OAAO,CAACI,MAAR,CAAeD,KAAf,CALb,CAAP;AAMH;AAED;;;;;;;;AAMA,SAAOE,IAAP,CAAYX,GAAZ,EAAiBK,IAAjB,EAAuB;AACnB,UAAMJ,OAAO,GAAG;AACZC,MAAAA,MAAM,EAAE,MADI;AAEZU,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAET,QAAAA;AAAF,OAAf;AAFM,KAAhB;AAMA,WAAOP,YAAY,CAACK,KAAb,CACHH,GADG,EAEHC,OAFG,EAIFG,IAJE,CAIGC,IAAI,IAAIC,OAAO,CAACC,OAAR,CAAgBF,IAAhB,CAJX,EAKFG,KALE,CAKIC,KAAK,IAAIH,OAAO,CAACI,MAAR,CAAeD,KAAf,CALb,CAAP;AAMH;AAED;;;;;;;;AAMA,SAAOM,GAAP,CAAWf,GAAX,EAAgBK,IAAhB,EAAsB;AAClB,UAAMJ,OAAO,GAAG;AACZC,MAAAA,MAAM,EAAE,KADI;AAEZU,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAET,QAAAA;AAAF,OAAf;AAFM,KAAhB;AAKA,WAAOP,YAAY,CAACK,KAAb,CACHH,GADG,EAEHC,OAFG,EAIFG,IAJE,CAIGC,IAAI,IAAIC,OAAO,CAACC,OAAR,CAAgBF,IAAhB,CAJX,EAKFG,KALE,CAKIC,KAAK,IAAIH,OAAO,CAACI,MAAR,CAAeD,KAAf,CALb,CAAP;AAMH;AAED;;;;;;;;AAMA,SAAON,KAAP,CAAaH,GAAb,EAAkBC,OAAlB,EAA2B;AACvB,UAAMe,OAAO,GACb;AACIC,MAAAA,MAAM,EAAE,kBADZ;AAEI,sBAAgB;AAFpB,KADA;AAMA,WAAOd,KAAK,CAACH,GAAD,EAAM;AACdgB,MAAAA,OADc;AAEd,SAAGf;AAFW,KAAN,CAAL,CAIFG,IAJE,CAIIc,GAAD,IAAS;AACX,UAAI,CAACpB,YAAY,CAACqB,YAAb,CAA0BD,GAA1B,CAAL,EAAqC;AACjC,eAAOA,GAAG,CAACE,IAAJ,GACFhB,IADE,CACGiB,IAAI,IAAIf,OAAO,CAACI,MAAR,CAAeW,IAAf,CADX,CAAP;AAEH;;AACD,aAAOH,GAAG,CAACE,IAAJ,GAAWhB,IAAX,CAAgBiB,IAAI,IAAIf,OAAO,CAACC,OAAR,CAAgBc,IAAhB,CAAxB,CAAP;AACH,KAVE,CAAP;AAWH;AAED;;;;;;;;AAMA,SAAOF,YAAP,CAAoBG,QAApB,EAA8B;AAC1B,QAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAnB,IAA0BD,QAAQ,CAACC,MAAT,GAAkB,GAAhD,EAAqD;AACjD,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH;;AAjG6B","sourcesContent":["export default class FetchService {\n    /**\n     * Sends GET request to API, returning any data\n     * or erros in a promise.\n     * @param {String} url URL for the API request.\n     */\n    static GET(url) {\n        const options = {\n            method: 'GET',\n        };\n\n        return FetchService.fetch(\n            url,\n            options,\n        )\n            .then(data => Promise.resolve(data))\n            .catch(error => Promise.reject(error));\n    }\n\n    /**\n     * Sends POST request to API, returning any data\n     * or erros in a promise.\n     * @param {String} url URL for the API request.\n     * @param {Boolean} authFlag Send Authorization header?\n     */\n    static POST(url, data) {\n        const options = {\n            method: 'POST',\n            body: JSON.stringify({ data }),\n        };\n\n\n        return FetchService.fetch(\n            url,\n            options,\n        )\n            .then(data => Promise.resolve(data))\n            .catch(error => Promise.reject(error));\n    }\n\n    /**\n     * Sends PUT request to API, returning any data\n     * or erros in a promise.\n     * @param {String} url URL for the API request.\n     * @param {Object} data Any data you want to pass to the API.\n     */\n    static PUT(url, data) {\n        const options = {\n            method: 'PUT',\n            body: JSON.stringify({ data }),\n        };\n\n        return FetchService.fetch(\n            url,\n            options,\n        )\n            .then(data => Promise.resolve(data))\n            .catch(error => Promise.reject(error));\n    }\n\n    /**\n     * Generic fetch method for our API.\n     * Automatically validates responses, etc.\n     * @param {String} url API URL you are calling.\n     * @param {Object} options HTTP header options.\n     */\n    static fetch(url, options) {\n        const headers =\n        {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        };\n\n        return fetch(url, {\n            headers,\n            ...options,\n        })\n            .then((res) => {\n                if (!FetchService._checkStatus(res)) {\n                    return res.json()\n                        .then(blob => Promise.reject(blob));\n                }\n                return res.json().then(blob => Promise.resolve(blob));\n            });\n    }\n\n    /**\n     * Checks the status code of a given response\n     * @param {Object} response API respoonse.\n     * @returns {Boolean} If the reponse code is good\n     * (>=200, <300) or not (> 300)\n     */\n    static _checkStatus(response) {\n        if (response.status >= 200 && response.status < 300) {\n            return true;\n        }\n        return false;\n    }\n}"]},"metadata":{},"sourceType":"module"}