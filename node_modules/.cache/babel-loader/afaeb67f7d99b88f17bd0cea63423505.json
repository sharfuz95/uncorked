{"ast":null,"code":"import _objectSpread from\"/Users/amanshrestha/Work/Careers Uncorked/uncorked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/Users/amanshrestha/Work/Careers Uncorked/uncorked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/amanshrestha/Work/Careers Uncorked/uncorked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";var FetchService=/*#__PURE__*/function(){function FetchService(){_classCallCheck(this,FetchService);}_createClass(FetchService,null,[{key:\"GET\",/**\n     * Sends GET request to API, returning any data\n     * or erros in a promise.\n     * @param {String} url URL for the API request.\n     */value:function GET(url){var options={method:'GET'};return FetchService.fetch(url,options).then(function(data){return Promise.resolve(data);}).catch(function(error){return Promise.reject(error);});}/**\n     * Sends POST request to API, returning any data\n     * or erros in a promise.\n     * @param {String} url URL for the API request.\n     * @param {Boolean} authFlag Send Authorization header?\n     */},{key:\"POST\",value:function POST(url,data){var options={method:'POST',body:JSON.stringify({data:data})};return FetchService.fetch(url,options).then(function(data){return Promise.resolve(data);}).catch(function(error){return Promise.reject(error);});}/**\n     * Sends PUT request to API, returning any data\n     * or erros in a promise.\n     * @param {String} url URL for the API request.\n     * @param {Object} data Any data you want to pass to the API.\n     */},{key:\"PUT\",value:function PUT(url,data){var options={method:'PUT',body:JSON.stringify({data:data})};return FetchService.fetch(url,options).then(function(data){return Promise.resolve(data);}).catch(function(error){return Promise.reject(error);});}/**\n     * Generic fetch method for our API.\n     * Automatically validates responses, etc.\n     * @param {String} url API URL you are calling.\n     * @param {Object} options HTTP header options.\n     */},{key:\"fetch\",value:function(_fetch){function fetch(_x,_x2){return _fetch.apply(this,arguments);}fetch.toString=function(){return _fetch.toString();};return fetch;}(function(url,options){var headers={Accept:'application/json','Content-Type':'application/json'};return fetch(url,_objectSpread({headers:headers},options)).then(function(res){if(!FetchService._checkStatus(res)){return res.json().then(function(blob){return Promise.reject(blob);});}return res.json().then(function(blob){return Promise.resolve(blob);});});})/**\n     * Checks the status code of a given response\n     * @param {Object} response API respoonse.\n     * @returns {Boolean} If the reponse code is good\n     * (>=200, <300) or not (> 300)\n     */},{key:\"_checkStatus\",value:function _checkStatus(response){if(response.status>=200&&response.status<300){return true;}return false;}}]);return FetchService;}();export{FetchService as default};","map":{"version":3,"sources":["/Users/amanshrestha/Work/Careers Uncorked/uncorked/src/assets/helper/FetchService.js"],"names":["FetchService","url","options","method","fetch","then","data","Promise","resolve","catch","error","reject","body","JSON","stringify","headers","Accept","res","_checkStatus","json","blob","response","status"],"mappings":"2fAAqBA,CAAAA,Y,gIACjB;;;;0BAKWC,G,CAAK,CACZ,GAAMC,CAAAA,OAAO,CAAG,CACZC,MAAM,CAAE,KADI,CAAhB,CAIA,MAAOH,CAAAA,YAAY,CAACI,KAAb,CACHH,GADG,CAEHC,OAFG,EAIFG,IAJE,CAIG,SAAAC,IAAI,QAAIC,CAAAA,OAAO,CAACC,OAAR,CAAgBF,IAAhB,CAAJ,EAJP,EAKFG,KALE,CAKI,SAAAC,KAAK,QAAIH,CAAAA,OAAO,CAACI,MAAR,CAAeD,KAAf,CAAJ,EALT,CAAP,CAMH,CAED;;;;;yCAMYT,G,CAAKK,I,CAAM,CACnB,GAAMJ,CAAAA,OAAO,CAAG,CACZC,MAAM,CAAE,MADI,CAEZS,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CAAER,IAAI,CAAJA,IAAF,CAAf,CAFM,CAAhB,CAMA,MAAON,CAAAA,YAAY,CAACI,KAAb,CACHH,GADG,CAEHC,OAFG,EAIFG,IAJE,CAIG,SAAAC,IAAI,QAAIC,CAAAA,OAAO,CAACC,OAAR,CAAgBF,IAAhB,CAAJ,EAJP,EAKFG,KALE,CAKI,SAAAC,KAAK,QAAIH,CAAAA,OAAO,CAACI,MAAR,CAAeD,KAAf,CAAJ,EALT,CAAP,CAMH,CAED;;;;;uCAMWT,G,CAAKK,I,CAAM,CAClB,GAAMJ,CAAAA,OAAO,CAAG,CACZC,MAAM,CAAE,KADI,CAEZS,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CAAER,IAAI,CAAJA,IAAF,CAAf,CAFM,CAAhB,CAKA,MAAON,CAAAA,YAAY,CAACI,KAAb,CACHH,GADG,CAEHC,OAFG,EAIFG,IAJE,CAIG,SAAAC,IAAI,QAAIC,CAAAA,OAAO,CAACC,OAAR,CAAgBF,IAAhB,CAAJ,EAJP,EAKFG,KALE,CAKI,SAAAC,KAAK,QAAIH,CAAAA,OAAO,CAACI,MAAR,CAAeD,KAAf,CAAJ,EALT,CAAP,CAMH,CAED;;;;;sLAMaT,G,CAAKC,O,CAAS,CACvB,GAAMa,CAAAA,OAAO,CACb,CACIC,MAAM,CAAE,kBADZ,CAEI,eAAgB,kBAFpB,CADA,CAMA,MAAOZ,CAAAA,KAAK,CAACH,GAAD,gBACRc,OAAO,CAAPA,OADQ,EAELb,OAFK,EAAL,CAIFG,IAJE,CAIG,SAACY,GAAD,CAAS,CACX,GAAI,CAACjB,YAAY,CAACkB,YAAb,CAA0BD,GAA1B,CAAL,CAAqC,CACjC,MAAOA,CAAAA,GAAG,CAACE,IAAJ,GACFd,IADE,CACG,SAAAe,IAAI,QAAIb,CAAAA,OAAO,CAACI,MAAR,CAAeS,IAAf,CAAJ,EADP,CAAP,CAEH,CACD,MAAOH,CAAAA,GAAG,CAACE,IAAJ,GAAWd,IAAX,CAAgB,SAAAe,IAAI,QAAIb,CAAAA,OAAO,CAACC,OAAR,CAAgBY,IAAhB,CAAJ,EAApB,CAAP,CACH,CAVE,CAAP,CAWH,C,CAED;;;;;yDAMoBC,Q,CAAU,CAC1B,GAAIA,QAAQ,CAACC,MAAT,EAAmB,GAAnB,EAA0BD,QAAQ,CAACC,MAAT,CAAkB,GAAhD,CAAqD,CACjD,MAAO,KAAP,CACH,CACD,MAAO,MAAP,CACH,C,mCAjGgBtB,Y","sourcesContent":["export default class FetchService {\n    /**\n     * Sends GET request to API, returning any data\n     * or erros in a promise.\n     * @param {String} url URL for the API request.\n     */\n    static GET(url) {\n        const options = {\n            method: 'GET',\n        };\n\n        return FetchService.fetch(\n            url,\n            options,\n        )\n            .then(data => Promise.resolve(data))\n            .catch(error => Promise.reject(error));\n    }\n\n    /**\n     * Sends POST request to API, returning any data\n     * or erros in a promise.\n     * @param {String} url URL for the API request.\n     * @param {Boolean} authFlag Send Authorization header?\n     */\n    static POST(url, data) {\n        const options = {\n            method: 'POST',\n            body: JSON.stringify({ data }),\n        };\n\n\n        return FetchService.fetch(\n            url,\n            options,\n        )\n            .then(data => Promise.resolve(data))\n            .catch(error => Promise.reject(error));\n    }\n\n    /**\n     * Sends PUT request to API, returning any data\n     * or erros in a promise.\n     * @param {String} url URL for the API request.\n     * @param {Object} data Any data you want to pass to the API.\n     */\n    static PUT(url, data) {\n        const options = {\n            method: 'PUT',\n            body: JSON.stringify({ data }),\n        };\n\n        return FetchService.fetch(\n            url,\n            options,\n        )\n            .then(data => Promise.resolve(data))\n            .catch(error => Promise.reject(error));\n    }\n\n    /**\n     * Generic fetch method for our API.\n     * Automatically validates responses, etc.\n     * @param {String} url API URL you are calling.\n     * @param {Object} options HTTP header options.\n     */\n    static fetch(url, options) {\n        const headers =\n        {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        };\n\n        return fetch(url, {\n            headers,\n            ...options,\n        })\n            .then((res) => {\n                if (!FetchService._checkStatus(res)) {\n                    return res.json()\n                        .then(blob => Promise.reject(blob));\n                }\n                return res.json().then(blob => Promise.resolve(blob));\n            });\n    }\n\n    /**\n     * Checks the status code of a given response\n     * @param {Object} response API respoonse.\n     * @returns {Boolean} If the reponse code is good\n     * (>=200, <300) or not (> 300)\n     */\n    static _checkStatus(response) {\n        if (response.status >= 200 && response.status < 300) {\n            return true;\n        }\n        return false;\n    }\n}"]},"metadata":{},"sourceType":"module"}